{"uid":"1ecce3e5eeb685a9","name":"add(int, int, int) 61 + 27 = 89","fullName":"com.example.project.CalculatorTests.add","historyId":"b8fef6eecc87f3a5611e0678c93bbefa","time":{"start":1721051182666,"stop":1721051182679,"duration":13},"description":"","status":"failed","statusMessage":"61 + 27 should equal 89 ==> expected: <89> but was: <88>","statusTrace":"org.opentest4j.AssertionFailedError: 61 + 27 should equal 89 ==> expected: <89> but was: <88>\n\tat org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)\n\tat org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)\n\tat org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)\n\tat org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:156)\n\tat org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:598)\n\tat com.example.project.CalculatorTests.add(CalculatorTests.kt:53)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat io.qameta.allure.junit5.AllureJunit5.interceptTestTemplateMethod(AllureJunit5.java:59)\n\tat java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:183)\n\tat java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)\n\tat java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)\n\tat java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)\n\tat java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:183)\n\tat java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)\n\tat java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)\n\tat java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)\n\tat java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:183)\n\tat java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)\n\tat java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:183)\n\tat java.base/java.util.stream.SliceOps$1$1.accept(SliceOps.java:200)\n\tat java.base/java.util.stream.StreamSpliterators$InfiniteSupplyingSpliterator$OfRef.tryAdvance(StreamSpliterators.java:1358)\n\tat java.base/java.util.stream.ReferencePipeline.forEachWithCancel(ReferencePipeline.java:129)\n\tat java.base/java.util.stream.AbstractPipeline.copyIntoWithCancel(AbstractPipeline.java:527)\n\tat java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:513)\n\tat java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)\n\tat java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:150)\n\tat java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:173)\n\tat java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)\n\tat java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)\n\tat java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)\n\tat java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)\n\tat java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)\n\tat java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)\n\tat java.base/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:992)\n\tat java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)\n\tat java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)\n\tat java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:150)\n\tat java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:173)\n\tat java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)\n\tat java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)\n\tat java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)\n\tat java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)\n\tat java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)\n\tat java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)\n\tat java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)\n\tat java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)\n\tat java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)\n\tat java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:150)\n\tat java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:173)\n\tat java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)\n\tat java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)\n\tat java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)\n\tat java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)\n\tat java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)\n\tat java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)\n\tat java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:150)\n\tat java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:173)\n\tat java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)\n\tat java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1511)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1511)\n","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"junit.platform.uniqueid","value":"[engine:junit-jupiter]/[class:com.example.project.CalculatorTests]/[test-template:add(int, int, int)]/[test-template-invocation:#3]"},{"name":"host","value":"fv-az1487-117"},{"name":"thread","value":"2031@fv-az1487-117.Test worker(1)"},{"name":"framework","value":"junit-platform"},{"name":"language","value":"java"},{"name":"package","value":"com.example.project.CalculatorTests"},{"name":"testClass","value":"com.example.project.CalculatorTests"},{"name":"testMethod","value":"add"},{"name":"suite","value":"com.example.project.CalculatorTests"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"arg0","value":"61"},{"name":"arg1","value":"27"},{"name":"arg2","value":"89"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":0,"skipped":0,"passed":37,"unknown":0,"total":38},"items":[{"uid":"7ef9244003f2221d","reportUrl":"https://Yang-33.github.io/allure-page-test/beta/40//#testresult/7ef9244003f2221d","status":"passed","time":{"start":1721050927594,"stop":1721050927596,"duration":2}},{"uid":"12a84affe0630473","reportUrl":"https://Yang-33.github.io/allure-page-test/beta/39//#testresult/12a84affe0630473","status":"passed","time":{"start":1721050679427,"stop":1721050679429,"duration":2}},{"uid":"7e0161ee0c20dd84","reportUrl":"https://Yang-33.github.io/allure-page-test/beta/38//#testresult/7e0161ee0c20dd84","status":"passed","time":{"start":1721050222491,"stop":1721050222493,"duration":2}},{"uid":"a213f0da11280a3c","reportUrl":"https://Yang-33.github.io/allure-page-test/beta/37//#testresult/a213f0da11280a3c","status":"passed","time":{"start":1721049851738,"stop":1721049851741,"duration":3}},{"uid":"44fe2883e5d841d2","reportUrl":"https://Yang-33.github.io/allure-page-test/beta/36//#testresult/44fe2883e5d841d2","status":"passed","time":{"start":1721049604032,"stop":1721049604041,"duration":9}},{"uid":"a58644a7ec51ae5e","reportUrl":"https://Yang-33.github.io/allure-page-test/beta/35//#testresult/a58644a7ec51ae5e","status":"passed","time":{"start":1721048273346,"stop":1721048273348,"duration":2}},{"uid":"1ef9caf088ea5b78","reportUrl":"https://Yang-33.github.io/allure-page-test/beta/34//#testresult/1ef9caf088ea5b78","status":"passed","time":{"start":1721048017914,"stop":1721048017916,"duration":2}},{"uid":"b4129d01a81f6d4","reportUrl":"https://Yang-33.github.io/allure-page-test/beta/33//#testresult/b4129d01a81f6d4","status":"passed","time":{"start":1721046042774,"stop":1721046042776,"duration":2}},{"uid":"705b3b9ef95a3461","reportUrl":"https://Yang-33.github.io/allure-page-test/beta/32//#testresult/705b3b9ef95a3461","status":"passed","time":{"start":1721045419594,"stop":1721045419596,"duration":2}},{"uid":"7a46905647deaab0","reportUrl":"https://Yang-33.github.io/allure-page-test/beta/31//#testresult/7a46905647deaab0","status":"passed","time":{"start":1721044902934,"stop":1721044902938,"duration":4}},{"uid":"d42bb0a29d270b49","reportUrl":"https://Yang-33.github.io/allure-page-test/beta/30//#testresult/d42bb0a29d270b49","status":"passed","time":{"start":1721044478287,"stop":1721044478289,"duration":2}},{"uid":"7ce66dbc64aeed89","reportUrl":"https://Yang-33.github.io/allure-page-test/beta/29//#testresult/7ce66dbc64aeed89","status":"passed","time":{"start":1721044221037,"stop":1721044221039,"duration":2}},{"uid":"ca1fc04ec3d0e741","reportUrl":"https://Yang-33.github.io/allure-page-test/beta/29//#testresult/ca1fc04ec3d0e741","status":"passed","time":{"start":1721043687069,"stop":1721043687072,"duration":3}},{"uid":"7953ce8b92df57df","reportUrl":"https://Yang-33.github.io/allure-page-test/beta/28//#testresult/7953ce8b92df57df","status":"passed","time":{"start":1721043218438,"stop":1721043218441,"duration":3}},{"uid":"f48b9ccc79534900","reportUrl":"https://Yang-33.github.io/allure-page-test/beta/27//#testresult/f48b9ccc79534900","status":"passed","time":{"start":1721042513129,"stop":1721042513131,"duration":2}},{"uid":"1243c51094e73453","reportUrl":"https://Yang-33.github.io/allure-page-test/beta/26//#testresult/1243c51094e73453","status":"passed","time":{"start":1721041435354,"stop":1721041435356,"duration":2}},{"uid":"bc73ac5e64378e09","reportUrl":"https://Yang-33.github.io/allure-page-test/beta/25//#testresult/bc73ac5e64378e09","status":"passed","time":{"start":1721041158228,"stop":1721041158231,"duration":3}},{"uid":"c8ec239be06e1708","reportUrl":"https://Yang-33.github.io/allure-page-test/beta/24//#testresult/c8ec239be06e1708","status":"passed","time":{"start":1721036285675,"stop":1721036285677,"duration":2}},{"uid":"c1eb7f4f41aea0a9","reportUrl":"https://Yang-33.github.io/allure-page-test/beta/23//#testresult/c1eb7f4f41aea0a9","status":"passed","time":{"start":1721035973686,"stop":1721035973688,"duration":2}},{"uid":"f1db94f5595ed81e","reportUrl":"https://Yang-33.github.io/allure-page-test/beta/22//#testresult/f1db94f5595ed81e","status":"passed","time":{"start":1721035448354,"stop":1721035448356,"duration":2}}]},"tags":[]},"source":"1ecce3e5eeb685a9.json","parameterValues":["61","27","89"]}